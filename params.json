{
  "name": "Drishti",
  "tagline": "Drishti is a visual regression testing tool, with focus on using browser as a standalone tool to execute tests",
  "body": "# Drishti\r\n\r\nDrishti is a visual regression testing tool, with a focus on using the browser as a standalone tool to execute tests and report in the browser console.\r\n\r\n![Drishti](http://media.yogajournal.com/wp-content/uploads/Drishti.png)\r\n\r\n## Why Drishti?\r\n\r\nVisual regression testing involves lots of efforts using manual testing. Traditionally it is done using eyeballing.\r\nAutomated tools like webdriver can be used, but requires additional programming to drive this.\r\n\r\n## How Drishti Works?\r\n\r\ndrishti.js runs the test against the drishtiSpec. \r\n\r\nThe drishtiSpec should be located within the visualSpec folder. \r\n\r\nMultiple specs can be defined in the different visualSpec file and can be loaded as required.\r\n\r\nDirectory structure:\r\n```\r\n├── js/\r\n│   ├── lib\r\n│   │   ├── drishti.js\r\n│   ├── visualSpec\r\n│   │   ├── home.js\r\n│   │   ├── mobile.js\r\n```\r\n\r\n## Getting Started\r\n\r\n###Pre-requisite \r\nNodejs installed on machine. [Nodejs download] (https://nodejs.org/en/download/)\r\n\r\nDownload the Drishti content using zip or using  git `git checkout https://github.com/rupeshmore/drishti.git`\r\n\r\nGo to Drishti directory\r\nrun `npm install`.\r\nThis will download all the nodejs dependencies.\r\n\r\nStart writing spec files in /js/lib/visualSpec directory.\r\n \r\n## Drishti Server and visual Spec Configuration\r\nedit the config.json file specify url to test and spec rules.\r\n```\r\n{\r\n\"url\": \"http://www.stuff.co.nz/\",\r\n\"browser\": \"google chrome\",\r\n\"report\":[\"cli\"],\r\n\"drishtiSpecRules\":[{\r\n\t\"file\":\"iphone.js\",\r\n    \"condition\":{\r\n    \t\"cssSelector\":{ \"title\":\"Latest breaking news NZ\" },\r\n    \t\"browserWidth\":{\"min\":0,\"max\":500}\r\n  \t\t}\r\n  \t},\r\n\t{\r\n\t\"file\":\"homePage.js\",\r\n\t\"condition\":{\r\n\t\t\"cssSelector\":{ \"title\":\"Latest breaking news NZ\" }\r\n\t}\r\n   }]\r\n}\r\n```\r\n```url - url to test```\r\n\r\n```browser - browser to open (for windows change 'google chrome' to 'chrome')```\r\n\r\n```report - If you want the results in command line too.```\r\n\r\n```file - visual spec file to load on a page. The visual spec file should be located in '/test/js/visualSpec/' folder```\r\n\r\n```Condition - load the file based on conditions for a page. \r\n\ttitle (or any selector) and \r\n\tusing screen size and \r\n\tdevices (desktop/mobile) (coming soon)```\r\n\r\n\r\n## Running Drishti tests?\r\nIn Drishti directory \r\nmake sure you have the directory structure:\r\n```\r\ntest/\r\n├── js/\r\n│   ├── lib\r\n│   │   ├── drishti.js\r\n│   ├── visualSpec\r\n│   │   ├── home.js\r\n```\r\nStart writing the spec files in visual spec folder.\r\n\r\nwithin Drishti folder.\r\nrun command `npm start`.\r\n\r\nThis will start the drishti server and open the browser to start testing.\r\nNavigate to different pages manually (or using drishti click method.) to load new visual spec file.\r\n\r\n(See Video)\r\n\r\n## Drishti test results?\r\nDrishti results can be viewed in browser console directly. It also provides command line report.\r\nDrishti will highlight all the test failures in the browser directly in red. Highlighting all the CSS selectors that failed during the test.\r\n\r\n\r\n## How to write a visualSpec file?\r\nvisualSpec files accept the below methods and format. All methods must use {} notations.\r\n\r\n```javascript\r\nvar drishtiSpec = {\r\n  elementA : {\r\n      // Mandatory css selector value for element\r\n      selector : 'css Selector Value',\r\n      \r\n      /* Relative Position methods*/\r\n      // elementA is above elementB by 30px\r\n      above : {elementA : 30 },\r\n      \r\n      // elementA is below elementC by 40px\r\n      below : {elementC : 40 },\r\n      \r\n      // elementA is on left of elementD by 50px\r\n      leftOf : {elementD : 50},\r\n      \r\n      // elementA is on right of elementE by 20px                           \r\n      rightOf :{elementE : 20},\r\n\r\n      // elementA is inside elementF with left 20px, right 20px, and top 10px, bottom 50 px\r\n      inside : {\r\n          elementF: { left:20, right:20,top:10, bottom:50 }\r\n      },\r\n\r\n      // Accepts 4 values 'Top', 'Bottom', 'Left', 'Right'\r\n      aligned: {elementH:'Top'},\r\n      \r\n      // elementA relative height to elementG\r\n      heightAs : {elementG : '100%' },\r\n\r\n      // elementA relative width to elementG                    \r\n      widthAs : {elementG : '90%' },\r\n\r\n      /* Element only methods*/\r\n      // elementA width is 200 px\r\n      width : 200,\r\n      \r\n      // elementA height is 100 px\r\n      height : 100,\r\n\r\n      // elementA text exact match\r\n      textIs : 'exact match',\r\n      \r\n      // elementA substring text match\r\n      textContains : 'substring',\r\n      \r\n      // elementA is visible on page? (boolean true or false)\r\n      visible : true,\r\n\r\n      // elementA is absent on the page? (boolean true or false)\r\n      absent : false,\r\n      \r\n      // elementA is in screen-view? (boolean true or false)                              \r\n      inViewport : true,\r\n\r\n      // elementA attribute 'href' has value 'http://www.abc.co.nz' (exact match)\r\n      attribute : {href :'http://www.abc.co.nz'},\r\n\r\n       // elementA css property 'background-image' has 'header-title.png' (exact match)\r\n      cssContains : {'background-image' : 'header-title.png'}\r\n\r\n     /* child Methods */\r\n     // css value of child and number of times the child appears in the page\r\n     childItems : {'.main_article' : 5},\r\n\r\n     // number of '<li>' within elementA\r\n     childList : 6,\r\n\r\n     // this can be repeat of all above methods (including childItems, childList & child itself)\r\n     child : {}   \r\n\r\n     /* Action Methods */\r\n     // Shows elementA is screen view. (performs page-up/down depending on the element location)\r\n     showInViewport : true,\r\n\r\n     // Enters the text 'Random' for elementA if it is input type.\r\n     enterText : 'Random',\r\n\r\n     // clicks on elementA\r\n     click : true,\r\n     \r\n      /* Page Scroll Actions */\r\n      // Performs number of page downs\r\n      pageDown : 1,\r\n\r\n      // Performs number of page up\r\n      pageUp : 1,\r\n  }  \r\n}\r\n```\r\n\r\n## Examples\r\n\r\n\r\n## Backstory\r\nDrishti was built to test responsive design across multiple browsers and devices and using real browsers.\r\nThe idea and concept were influenced during technology labs working at stuff.co.nz\r\n\r\nDrishti was tested on chrome and mac platform. It also works in firefox and safari and IE and mobile devices.",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}